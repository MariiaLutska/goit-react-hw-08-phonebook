{"version":3,"file":"static/js/134.0ed41e1e.chunk.js","mappings":"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","sources":["components/Box.js","components/Contact/Contact.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","redux/filtersSlice.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  background,\n  border,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  background,\n  border\n);\n\nexport default Box;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { Box } from '../Box';\nimport { ContactButton } from '../Button/Button';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(contact));\n\n  // const handleToggle = () => dispatch(toggleCompleted(contact));\n\n  return (\n    <Box color=\"primary\" as=\"li\" display=\"block\" alignItems=\"center\">\n      {/* <label type=\"value\" onChange={handleToggle} /> */}\n      {contact.name} : {contact.number}\n      <ContactButton type=\"button\" onClick={handleDelete}>\n        Delete\n      </ContactButton>\n    </Box>\n  );\n};\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectContacts = state => state.contacts.items;\n","import { useSelector } from 'react-redux';\nimport { Contact } from '../Contact/Contact';\nimport { Box } from '@chakra-ui/react';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { selectLoading } from '../../redux/contacts/selectors';\nimport { Circles } from 'react-loader-spinner';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectLoading);\n\n  return (\n    <Box color=\"secondary\" as=\"ul\">\n      {isLoading && <Circles width={50} height={50} />}\n\n      {contacts.map(contact => (\n        <Contact key={contact.id} contact={contact} item={contact} />\n      ))}\n    </Box>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst filtersInitialState = {\n  status: '',\n};\n\nconst filtersSlice = createSlice({\n  name: 'filters',\n  initialState: filtersInitialState,\n  reducers: {\n    setFilter(state, action) {\n      state.status = action.payload;\n    },\n  },\n});\n\nexport const { setFilter } = filtersSlice.actions;\nexport const filtersReducer = filtersSlice.reducer;\n","// import React from 'react';\nimport { Input, FormLabel } from '@chakra-ui/react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { setFilter } from '../../redux/filtersSlice';\n// import { selectFilter } from '../../redux/contacts/selectors';\n\n// export const Filter = () => {\n//   const dispatch = useDispatch();\n//   const value = useSelector(selectFilter);\n\n//   const onChange = e => {\n//     dispatch(setFilter(e.target.value));\n//   };\n\n//   return (\n//     <FormLabel>\n//       Find contacts by name\n//       <Input\n//         variant=\"filled\"\n//         label=\"Find contacts by name\"\n//         type=\"text\"\n//         value={value}\n//         name=\"filter\"\n//         onChange={onChange}\n//       />\n//     </FormLabel>\n//   );\n// };\n\n// import { useSelector, useDispatch } from 'react-redux';\n// import { setFilter } from '../../redux/filtersSlice';\n// import { selectFilter } from '../../redux/contacts/selectors';\n\n// export const Filter = () => {\n//   const dispatch = useDispatch();\n//   const value = useSelector(selectFilter);\n\n//   const onChange = e => {\n//     dispatch(setFilter(e.target.value));\n//   };\n\n//   return (\n//     <FormLabel>\n//       Find contacts by name\n//       <Input type=\"text\" value={value} onChange={onChange} />\n//     </FormLabel>\n//   );\n// };\n\nimport { Box } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filtersSlice';\nimport { useSearchParams } from 'react-router-dom';\nimport { useEffect } from 'react';\n\nexport default function Filter() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filterValue = searchParams.get('filter') ?? '';\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setFilter(filterValue));\n  }, [dispatch, filterValue]);\n\n  const handleFilter = e => {\n    const value = e.currentTarget.value.trim();\n    setSearchParams(value ? { filter: value } : {});\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gridGap={2} mb={4}>\n      <FormLabel>Find contacts by name</FormLabel>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilter}\n        defaultValue={filterValue}\n      />\n    </Box>\n  );\n}\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n// import css from './ContactForm.module.css';\nimport { Box } from '@chakra-ui/react';\nimport { Input } from '@chakra-ui/react';\nimport { ContactButton } from '../Button/Button';\nimport {\n  // FormControl,\n  FormLabel,\n  // FormErrorMessage,\n  // FormHelperText,\n} from '@chakra-ui/react';\n\nlet nameId = nanoid();\nlet numbId = nanoid();\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  // const [id, setId] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   const form = e.currentTarget;\n  //   dispatch(\n  //     addContact({\n  //       name: form.elements.name.value,\n  //       number: form.elements.number.value,\n  //     })\n  //   );\n  //   form.reset();\n  // };\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    // setId(nanoid());\n\n    if (name === 'name') {\n      return setName(value);\n    } else if (name === 'number') {\n      return setNumber(value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let data = { name, number };\n    let findName = contacts.find(\n      item => item.name.toLowerCase() === data.name.toLowerCase()\n    );\n\n    if (findName) {\n      return alert(`${data.name} is already in contact`);\n    } else {\n      dispatch(addContact(data));\n    }\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Box>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormLabel>\n          Name\n          <Input\n            variant=\"filled\"\n            onInput={handleInputChange}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter name...\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id={nameId}\n          />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <Input\n            variant=\"filled\"\n            onInput={handleInputChange}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Enter number...\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            id={numbId}\n          />\n        </FormLabel>\n        <ContactButton type=\"submit\">Add contact</ContactButton>\n      </form>\n    </Box>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from '../redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Box } from '../components/Box';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box as=\"main\" padding=\"40px\">\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList />\n    </Box>\n  );\n}\n"],"names":["Box","styled","color","space","layout","flexbox","background","border","Contact","contact","dispatch","useDispatch","as","display","alignItems","name","number","type","onClick","deleteContact","selectLoading","state","contacts","loading","selectContacts","items","ContactList","useSelector","isLoading","width","height","map","item","id","filtersSlice","createSlice","initialState","status","reducers","setFilter","action","payload","actions","reducer","Filter","useSearchParams","searchParams","setSearchParams","filterValue","get","useEffect","flexDirection","gridGap","mb","onChange","e","value","currentTarget","trim","filter","defaultValue","nameId","nanoid","numbId","ContactForm","useState","setName","setNumber","handleInputChange","target","reset","onSubmit","preventDefault","data","find","toLowerCase","alert","addContact","autoComplete","variant","onInput","placeholder","pattern","title","required","Contacts","fetchContacts","padding"],"sourceRoot":""}